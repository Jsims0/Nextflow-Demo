// Global default params, used in configs
params {
  input = null
  outdir = "results"
}
profiles {

  local {
    executor.name = 'local'
    docker.enabled = true
  }

  // Docker environment parameters
  docker {
    enabled     = true
    autoMounts  = true
    docker.remove = true
    docker.runOptions = '-u $(id -u):$(id -g)'
    docker.registry = "quay.io"
    singularity.enabled = false
    apptainer.enabled = false
  }
  singularity{
    singularity.enabled = true
    singularity.cacheDir = "singularity/cacheDir"

    singularity.registry = "quay.io"
    docker.enabled = false
    apptainer.enabled = false
  }

  apptainer{
    apptainer.enabled = true
    apptainer.cacheDir = "apptainer/cacheDir"
    apptainer.registry = "quay.io"
    docker.enabled = false
    singularity.enabled = false
  }

  executor {
    name = 'local'
  }
}
process {
// Container needs to be changed to local installation name 
  container = 'vep:v0.1'
}

includeConfig 'conf/base.config'

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Capturing Nextflow log files into a reports directory
timeline {
   enabled = true
   file = "${params.outdir}/pipeline-info/timeline.html" 
   overwrite = true
}

report {
   enabled = true
   file = "${params.outdir}/pipeline-info/report.html"
   overwrite = true
}

trace {
   enabled = true
   file = "${params.outdir}/pipeline-info/trace.txt"
   overwrite = true
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

cleanup = true